#!/usr/bin/env python
#
# multi-line log grep
#

import re
import sys
import optparse

USAGE = '''%prog [OPTIONS] KEYWORD [FILES]'''


##
## A pattern of a line of a beggining of log entry
## Default is something like 'Wed Nov 14 06:05:26 2012 GMT'
##
dow   = '((Mon|Tue|Wed|Thu|Fri|Sat),?\s+)?'
month = '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec),?\s+'
date  = '\d{1,2},?'
time  = '[0-2][0-9]:[0-5][0-9](:[0-5][0-9])?'
year  = '(,?\s20\d\d)?'
dty   = "{d}[ \t]{t}{y}".format(d=date, t=time, y=year)
isodate = '20[0-9][0-9]-(0[0-9]|11|12)-(0[1-9]|[12][0-9]|3[01])'
timestamp = '^({dow}{month}{dty}|{isodate})'.format(
                dow=dow, month=month, dty=dty, isodate=isodate)
timestamp_sample = 'Mon Jan 31 12:34:56 2013 PST'

logheader = "^$|^(=====*|-----*)$"


def mlrgrep(count, pattern, ioin, ioout, re_logheader):
    is_matched = False
    logical_line = []
    nr_matches = 0
    for curline in ioin:
        if re_logheader.match(curline):
            logical_line = []
            is_matched = False

        if is_matched == True:
            if not count:
                ioout.write(curline)
            continue
        else:
            if not count:
                logical_line.append(curline)
            if pattern.search(curline):
                nr_matches += 1
                is_matched = True
                if not count:
                    for l in logical_line:
                        ioout.write(l)
    if count:
        ioout.write("{:d}\n".format(nr_matches))


def _optparse( args ):
    p = optparse.OptionParser(usage=USAGE)
    p.add_option("-r", "--rs", metavar="REGEX", default=logheader,
            help="pattern of beginning of a log (default: /{}/)".format(logheader))
    p.add_option("-t", "--timestamp", action='store_true', default=False,
            help="Same as --rs=TIMESTAMP_REGEX, where the regex matches timestamps"
                 "often used in log files, e.g., '2014-12-31 12:34:56' or "
                 "'Dec 31 12:34:56'.\n(default={})".format(timestamp_sample))
    p.add_option("-c", "--count", action='store_true', default=False,
            help="Print number of matches.")
    p.add_option("-i", "--ignore-case", action='store_true', default=False,
            help="Case insensitive match.")
    return p.parse_args( args )


def main( args ):
    opts, args = _optparse( args )

    if opts.ignore_case:
        ignore_case = [re.IGNORECASE]
    else:
        ignore_case = []

    if opts.timestamp:
        rs = re.compile(timestamp)
    else:
        rs = re.compile(opts.rs, *ignore_case)
    common_args = [sys.stdout, rs]

    if len( args ) >= 1 :
        pattern = re.compile( args[0], *ignore_case )
    else:
        sys.stderr.write('ERROR: too few arguments\n')
        sys.exit(1)

    try:
        if len(args) >= 2 :
            for fname in args[1:]:
                if fname == '-':
                    mlrgrep(opts.count, pattern, sys.stdin, *common_args)
                else:
                    if opts.count and len(args) >= 3:
                        sys.stdout.write(fname + ":")
                    mlrgrep(opts.count, pattern, open(fname), *common_args)
        else:
            mlrgrep(pattern, sys.stdin, *common_args)
    except KeyboardInterrupt:
        sys.exit(0)
    except IOError as e:
        import errno
        if e.errno == errno.EPIPE:
            sys.exit(0)
        else:
            raise



if __name__ == '__main__':
    main( sys.argv[1:] )
