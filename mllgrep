#!/usr/bin/env python
#
# multi-line log grep
#

import re
import sys
import optparse

USAGE = '''%prog [OPTIONS] KEYWORD [FILES]'''


##
## A pattern of a line of a beggining of log entry
## Default is something like 'Wed Nov 14 06:05:26 2012 GMT'
##
dow   = '(Mon|Tue|Wed|Thu|Fri|Sat)'
month = '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'
dtime = '\d{1,2} \d\d:\d\d:\d\d( 20\d\d)?' # 31 12:34:56 2013
tzone = '[A-Z]{3,5}'
logheader = '^(%s )?%s %s (%s )?' % (dow, month, dtime, tzone)
logheader_sample = 'Mon Jan 31 12:34:56 2013 PST'


def mllgrep(pattern, ioin, ioout, logheader=logheader, combine=False):
    is_matched = False
    if isinstance(logheader, basestring):
        re_logheader = re.compile(logheader)
    else:
        re_logheader = logheader

    logical_line = []
    for curline in ioin:
        if re_logheader.match(curline):
            if is_matched and combine:
                ioout.write('\n')
            logical_line = []
            is_matched = False

        if combine:
            curline = curline.rstrip('\n') + ' '

        if is_matched == True:
            ioout.write(curline)
            continue
        else:
            logical_line.append(curline)
            if pattern.search(curline):
                is_matched = True
                for l in logical_line:
                    ioout.write(l)
    if is_matched and combine:
        ioout.write('\n')


def _optparse( args ):
    p = optparse.OptionParser(usage=USAGE)
    p.add_option("-l", "--logheader", metavar="REGEX", default=logheader,
            help="pattern of beginning of a log\n(default=%s)"%logheader_sample)
    p.add_option("-c", "--combine", action='store_true', default=False,
            help="Combine multi-line log into one line.")
    return p.parse_args( args )


def main( args ):
    opts, args = _optparse( args )

    common_args = [sys.stdout, opts.logheader, opts.combine]

    if len( args ) >= 1 :
        pattern = re.compile( args[0] )
    else:
        sys.stderr.write('ERROR: too few arguments\n')
        sys.exit(1)

    try:
        if len(args) >= 2 :
            for fname in args[1:]:
                if fname == '-':
                    mllgrep( pattern, sys.stdin, *common_args)
                else:
                    mllgrep( pattern, open(fname), *common_args)
        else:
            mllgrep( pattern, sys.stdin, *common_args)
    except KeyboardInterrupt:
        sys.exit(0)
    except IOError as e:
        import errno
        if e.errno == errno.EPIPE:
            sys.exit(0)
        else:
            raise





if __name__ == '__main__':
    main( sys.argv[1:] )
